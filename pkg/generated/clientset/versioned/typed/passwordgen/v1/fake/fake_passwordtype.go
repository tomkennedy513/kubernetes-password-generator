// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	passwordgenv1 "github.com/tomkennedy513/password-gen/pkg/apis/passwordgen/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePasswordTypes implements PasswordTypeInterface
type FakePasswordTypes struct {
	Fake *FakeTomkennedyV1
	ns   string
}

var passwordtypesResource = schema.GroupVersionResource{Group: "tomkennedy.dev", Version: "v1", Resource: "passwordtypes"}

var passwordtypesKind = schema.GroupVersionKind{Group: "tomkennedy.dev", Version: "v1", Kind: "PasswordType"}

// Get takes name of the passwordType, and returns the corresponding passwordType object, and an error if there is any.
func (c *FakePasswordTypes) Get(ctx context.Context, name string, options v1.GetOptions) (result *passwordgenv1.PasswordType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(passwordtypesResource, c.ns, name), &passwordgenv1.PasswordType{})

	if obj == nil {
		return nil, err
	}
	return obj.(*passwordgenv1.PasswordType), err
}

// List takes label and field selectors, and returns the list of PasswordTypes that match those selectors.
func (c *FakePasswordTypes) List(ctx context.Context, opts v1.ListOptions) (result *passwordgenv1.PasswordTypeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(passwordtypesResource, passwordtypesKind, c.ns, opts), &passwordgenv1.PasswordTypeList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &passwordgenv1.PasswordTypeList{ListMeta: obj.(*passwordgenv1.PasswordTypeList).ListMeta}
	for _, item := range obj.(*passwordgenv1.PasswordTypeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested passwordTypes.
func (c *FakePasswordTypes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(passwordtypesResource, c.ns, opts))

}

// Create takes the representation of a passwordType and creates it.  Returns the server's representation of the passwordType, and an error, if there is any.
func (c *FakePasswordTypes) Create(ctx context.Context, passwordType *passwordgenv1.PasswordType, opts v1.CreateOptions) (result *passwordgenv1.PasswordType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(passwordtypesResource, c.ns, passwordType), &passwordgenv1.PasswordType{})

	if obj == nil {
		return nil, err
	}
	return obj.(*passwordgenv1.PasswordType), err
}

// Update takes the representation of a passwordType and updates it. Returns the server's representation of the passwordType, and an error, if there is any.
func (c *FakePasswordTypes) Update(ctx context.Context, passwordType *passwordgenv1.PasswordType, opts v1.UpdateOptions) (result *passwordgenv1.PasswordType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(passwordtypesResource, c.ns, passwordType), &passwordgenv1.PasswordType{})

	if obj == nil {
		return nil, err
	}
	return obj.(*passwordgenv1.PasswordType), err
}

// Delete takes name of the passwordType and deletes it. Returns an error if one occurs.
func (c *FakePasswordTypes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(passwordtypesResource, c.ns, name), &passwordgenv1.PasswordType{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePasswordTypes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(passwordtypesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &passwordgenv1.PasswordTypeList{})
	return err
}

// Patch applies the patch and returns the patched passwordType.
func (c *FakePasswordTypes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *passwordgenv1.PasswordType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(passwordtypesResource, c.ns, name, pt, data, subresources...), &passwordgenv1.PasswordType{})

	if obj == nil {
		return nil, err
	}
	return obj.(*passwordgenv1.PasswordType), err
}
